import { DiagnosticData } from "@/types/diagnostic";

export interface HydrationResult {
  // Besoins basals quotidiens
  besoins_basals_ml: number;
  details_basals: {
    base_age_sexe: number;
    ajust_imc: number;
    ajust_temperature: number;
    ajust_boissons: number;
    ajust_physiologique: number;
    ajust_symptomes: number;
  };
  
  // Besoins pendant l'exercice
  besoins_exercice_ml: number;
  details_exercice: {
    pertes_transpiration: number;
    facteur_sport: number;
    duree_heures: number;
    ajust_temperature: number;
  };
  
  // Totaux et recommandations
  besoin_total_ml: number;
  hydratation_reelle_ml: number;
  ecart_hydratation_ml: number;
  nb_pastilles_basal: number;
  nb_pastilles_exercice: number;
  nb_pastilles_post_exercice: number;
  score: number;
  statut: string;
  notes: string[];
}

// Convertit l'√¢ge exact en valeurs pour le calcul
const getAgeData = (ageInput: string): { median: number; mlPerKg: number; facteurMetabo: number } => {
  const age = parseInt(ageInput);
  
  // Si l'√¢ge n'est pas valide, utiliser la valeur par d√©faut adulte
  if (isNaN(age) || age < 1) {
    return { median: 33, mlPerKg: 32.5, facteurMetabo: 1.0 };
  }
  
  // D√©terminer la tranche d'√¢ge et retourner les param√®tres correspondants
  if (age >= 3 && age <= 10) {
    return { median: age, mlPerKg: 55, facteurMetabo: 1.3 };
  } else if (age >= 11 && age <= 17) {
    return { median: age, mlPerKg: 45, facteurMetabo: 1.1 };
  } else if (age >= 18 && age <= 49) {
    return { median: age, mlPerKg: 32.5, facteurMetabo: 1.0 };
  } else if (age >= 50 && age <= 60) {
    return { median: age, mlPerKg: 30, facteurMetabo: 0.9 };
  } else if (age >= 61 && age <= 69) {
    return { median: age, mlPerKg: 30, facteurMetabo: 0.9 };
  } else if (age >= 70) {
    return { median: age, mlPerKg: 25, facteurMetabo: 0.8 };
  } else {
    // Pour les enfants < 3 ans, utiliser les param√®tres des 3-10 ans
    return { median: 3, mlPerKg: 55, facteurMetabo: 1.3 };
  }
};

// Facteur selon le sexe
const getFacteurSexe = (sexe: string, situation: string): { facteur: number; bonus: number } => {
  if (situation === "Allaitante") return { facteur: 0.9, bonus: 700 };
  if (situation?.startsWith("Enceinte")) return { facteur: 0.9, bonus: 300 };
  if (sexe === "Une femme") return { facteur: 0.9, bonus: 0 };
  if (sexe === "Un homme") return { facteur: 1.0, bonus: 0 };
  return { facteur: 0.95, bonus: 0 }; // Autre
};

// Calcul IMC
const calculateIMC = (poids_kg: number, taille_cm: number): number => {
  const taille_m = taille_cm / 100;
  return poids_kg / (taille_m * taille_m);
};

// Calcul de base selon IMC
const calculateBaseHydration = (poids_kg: number, imc: number, mlPerKg: number): number => {
  if (imc >= 30) {
    // Formule sp√©ciale pour IMC ‚â• 30
    return (poids_kg - 20) * 15 + 1500;
  }
  return poids_kg * mlPerKg;
};

// Ajustement temp√©rature pour besoins basals
const getAjustTemperatureBasal = (temperature: string): number => {
  if (temperature === "< 10¬∞C") return 0;
  if (temperature === "10-18¬∞C") return 0;
  if (temperature === "18-28¬∞C") return 200;
  if (temperature === "> 28¬∞C") return 500;
  return 0;
};

// Ajustement temp√©rature pour exercice (ml/h)
const getAjustTemperatureExercice = (temperature: string): number => {
  if (temperature === "< 10¬∞C") return 0;
  if (temperature === "10-18¬∞C") return 0; // ‚â§ 20¬∞C
  if (temperature === "18-28¬∞C") return 150; // 21-25¬∞C moyenne
  if (temperature === "> 28¬∞C") return 350; // 30-32¬∞C+ moyenne
  return 0;
};

// Facteur selon type de sport
const getFacteurSport = (typeSport: string): number => {
  const facteurs: Record<string, number> = {
    "Endurance continue": 1.0,
    "Intermittent/collectif/HIIT": 0.9,
    "Musculation/Force": 0.6,
    "Natation": 0.8,
    "Sports collectifs": 0.85,
    "Yoga/Pilates/Stretching": 0.5
  };
  return facteurs[typeSport] || 1.0;
};

// Convertir dur√©e de s√©ance en heures
const getDureeHeures = (dureeSeance: string): number => {
  if (dureeSeance === "15-30 min") return 0.375; // 22.5 min
  if (dureeSeance === "30-60 min") return 0.75; // 45 min
  if (dureeSeance === "60-120 min") return 1.5; // 90 min
  if (dureeSeance === "120+ min") return 2.5; // 150 min
  return 0;
};

// Note: La couleur d'urine est utilis√©e uniquement comme indicateur, pas pour ajuster les besoins

// Ajustement boissons d√©shydratantes
const getAjustBoissons = (boissons: any): { total: number; notes: string[] } => {
  if (!boissons) return { total: 0, notes: [] };
  
  let total = 0;
  const notes: string[] = [];
  
  // Caf√©/th√© non sucr√©
  const cafeThe = boissons.cafe_the || 0;
  if (cafeThe > 3) {
    total += 150;
    notes.push("Plus de 3 caf√©s/th√©s par jour : pensez √† augmenter votre consommation d'eau.");
  }
  
  // Caf√©/th√© sucr√©
  const cafeSucre = boissons.cafe_sucre || 0;
  if (cafeSucre >= 2) {
    total += 200;
    notes.push("Caf√©/th√© sucr√© : privil√©giez l'eau ou le caf√© non sucr√© pour une meilleure hydratation.");
  }
  
  // Soda/jus sucr√©
  const sodaJus = (boissons.soda || 0) + (boissons.jus || 0);
  if (sodaJus >= 1) {
    total += 100;
    notes.push("Sodas et jus sucr√©s : limitez leur consommation et privil√©giez l'eau.");
  }
  
  // Soda 0%
  const sodaZero = boissons.soda_zero || 0;
  if (sodaZero >= 1) {
    total += 100;
    notes.push("Sodas 0% : sans sucre mais acidifiants, √† consommer avec mod√©ration.");
  }
  
  // Boisson √©nergisante
  const energisante = boissons.boisson_energisante || 0;
  if (energisante >= 1) {
    total += 150;
    notes.push("Boissons √©nergisantes : tr√®s sucr√©es et caf√©in√©es, fortement d√©shydratantes.");
  }
  
  // Vin
  const vin = boissons.vin || 0;
  if (vin >= 1) {
    total += 100;
    notes.push("L'alcool d√©shydrate : compensez avec de l'eau. L'abus d'alcool est dangereux pour la sant√©.");
  }
  
  // Bi√®re
  const biere = boissons.biere || 0;
  if (biere >= 1) {
    total += 100;
    notes.push("La bi√®re est diur√©tique : pensez √† bien vous hydrater.");
  }
  
  return { total, notes };
};

export const calculateHydration = (data: DiagnosticData): HydrationResult => {
  const sexe = data.sexe || "Un homme";
  const poids_kg = parseFloat(data.poids_kg || "70");
  const taille_cm = parseFloat(data.taille_cm || "170");
  const ageData = getAgeData(data.age || "18-49 ans");
  const situation_particuliere = data.situation_particuliere || "Aucune";
  const temperature_ext = data.temperature_ext || "18-28¬∞C";
  const sport_pratique = data.sport_pratique || "Non";
  const type_sport = data.type_sport || "";
  const duree_seance = data.duree_seance || "";
  const transpiration_echelle = parseFloat(data.transpiration || "5");
  const urine_couleur = parseInt(data.urine_couleur || "4");
  const crampes = data.crampes || "Non";
  const courbatures = data.courbatures || "Non";
  const metier_physique = data.metier_physique || "Non";
  const boissons = data.boissons_journalieres;

  // ========== CALCUL DES BESOINS BASALS ==========
  
  // 1. Base selon √¢ge et sexe
  const imc = calculateIMC(poids_kg, taille_cm);
  const baseHydration = calculateBaseHydration(poids_kg, imc, ageData.mlPerKg);
  const facteurSexe = getFacteurSexe(sexe, situation_particuliere);
  const base_age_sexe = Math.round(baseHydration * facteurSexe.facteur * ageData.facteurMetabo);
  
  // 2. Ajustement IMC (d√©j√† inclus dans baseHydration)
  const ajust_imc = imc >= 30 ? Math.round((poids_kg - 20) * 15 + 1500 - (poids_kg * ageData.mlPerKg)) : 0;
  
  // 3. Ajustement temp√©rature
  const ajust_temperature = getAjustTemperatureBasal(temperature_ext);
  
  // 4. Ajustement boissons
  const boissonData = getAjustBoissons(boissons);
  const ajust_boissons = boissonData.total;
  
  // 5. Ajustement physiologique (grossesse/allaitement)
  const ajust_physiologique = facteurSexe.bonus;
  
  // 6. Ajustement sympt√¥mes (m√©tier physique uniquement)
  let ajust_symptomes = 0;
  if (metier_physique === "Oui") ajust_symptomes += 500;
  
  const besoins_basals_ml = Math.max(
    base_age_sexe + ajust_temperature + ajust_boissons + ajust_physiologique + ajust_symptomes,
    1500 // garde-fou plancher
  );

  // ========== CALCUL DES BESOINS PENDANT L'EXERCICE ==========
  
  let besoins_exercice_ml = 0;
  let pertes_transpiration = 0;
  let facteur_sport = 0;
  let duree_heures = 0;
  let ajust_temperature_exercice = 0;
  
  if (sport_pratique === "Oui" && type_sport && duree_seance) {
    // Calcul pertes par transpiration (ml/kg/h)
    const pertes_ml_kg_h = 5 + (0.6 * transpiration_echelle);
    pertes_transpiration = pertes_ml_kg_h * poids_kg;
    
    // Facteur type de sport
    facteur_sport = getFacteurSport(type_sport);
    
    // Dur√©e en heures
    duree_heures = getDureeHeures(duree_seance);
    
    // Ajustement temp√©rature pour exercice (ml/h)
    ajust_temperature_exercice = getAjustTemperatureExercice(temperature_ext);
    
    // Total besoins exercice
    besoins_exercice_ml = Math.round(
      (pertes_transpiration * facteur_sport + ajust_temperature_exercice) * duree_heures
    );
  }

  // ========== TOTAUX ET RECOMMANDATIONS ==========
  
  let besoin_total_ml = besoins_basals_ml + besoins_exercice_ml;
  const besoin_total_original = besoin_total_ml;
  
  // ========== PLAFOND DE 6000 ML ==========
  const PLAFOND_MAX = 6000;
  let alerte_plafond = "";
  
  if (besoin_total_ml >= 4500 && besoin_total_ml < 5000) {
    alerte_plafond = "üíß Vos besoins hydriques sont √©lev√©s. Pensez √† vous hydrater r√©guli√®rement tout au long de la journ√©e.";
  } else if (besoin_total_ml >= 5000 && besoin_total_ml < PLAFOND_MAX) {
    alerte_plafond = "‚ö†Ô∏è Vos besoins hydriques sont exceptionnellement √©lev√©s en raison de la combinaison de plusieurs facteurs (chaleur, activit√© physique intense, etc.). Fractionnez bien votre hydratation et consultez un professionnel de sant√© si n√©cessaire.";
  } else if (besoin_total_ml >= PLAFOND_MAX) {
    alerte_plafond = `‚ö†Ô∏è Vos besoins calcul√©s d√©passent ${PLAFOND_MAX / 1000}L (${besoin_total_original} mL), ce qui concerne les athl√®tes de haut niveau en conditions extr√™mes. La valeur a √©t√© plafonn√©e √† ${PLAFOND_MAX / 1000}L. Un suivi m√©dical sportif est fortement recommand√© pour une hydratation personnalis√©e.`;
    besoin_total_ml = PLAFOND_MAX;
  }
  
  // Calcul de l'hydratation r√©elle
  let hydratation_reelle_ml = 0;
  if (boissons) {
    // 1 verre = 250 ml
    const totalVerres = Object.values(boissons).reduce((sum: number, qty: number) => sum + qty, 0);
    hydratation_reelle_ml = totalVerres * 250;
  }
  
  // √âcart entre besoins et hydratation r√©elle
  const ecart_hydratation_ml = besoin_total_ml - hydratation_reelle_ml;
  
  // Pastilles Hydratis
  // Pour les besoins basals : 2 pastilles / 500 ml
  let nb_pastilles_basal = Math.ceil(besoins_basals_ml / 500 / 2);
  if (temperature_ext === "> 28¬∞C") nb_pastilles_basal += 1;
  nb_pastilles_basal = Math.min(nb_pastilles_basal, 5);
  if (ageData.median >= 60 && ageData.median < 70) nb_pastilles_basal = Math.min(nb_pastilles_basal, 3);
  if (ageData.median >= 70) nb_pastilles_basal = Math.min(nb_pastilles_basal, 2);
  
  // Pour l'exercice : 1 pastille / 500 ml
  const nb_pastilles_exercice = besoins_exercice_ml > 0 ? Math.ceil(besoins_exercice_ml / 500) : 0;
  
  // Pour la r√©cup√©ration post-exercice : 1 pastille si besoins exercice > 0
  const nb_pastilles_post_exercice = besoins_exercice_ml > 0 ? 1 : 0;

  // Score d'hydratation : (Hydratation actuelle / Besoin total quotidien) * 100
  const score = Math.round((hydratation_reelle_ml / besoin_total_ml) * 100);

  // Statut
  const statut = score >= 85 ? "Hydratation optimale"
               : score >= 70 ? "Hydratation correcte"
               : score >= 50 ? "L√©g√®re d√©shydratation"
               : "D√©shydratation probable";

  // ========== MESSAGES PERSONNALIS√âS CONTEXTUELS ==========
  const notes: string[] = [...boissonData.notes];
  
  // Ajouter l'alerte de plafond en premier si elle existe
  if (alerte_plafond) {
    notes.unshift(alerte_plafond);
  }
  
  // üíß 1. Eau consomm√©e
  if (hydratation_reelle_ml > 0) {
    const pourcentage_besoins = Math.round((hydratation_reelle_ml / besoin_total_ml) * 100);
    const manque_ml = Math.max(0, besoin_total_ml - hydratation_reelle_ml);
    
    if (pourcentage_besoins >= 90) {
      notes.push(`üíß Vous √™tes sur la bonne voie avec ${hydratation_reelle_ml} mL d'eau par jour, continuez √† boire r√©guli√®rement tout au long de la journ√©e.`);
    } else if (pourcentage_besoins >= 70) {
      notes.push(`üíß Votre apport en eau repr√©sente environ ${pourcentage_besoins}% de vos besoins journaliers. Essayez d'ajouter environ ${manque_ml} mL d'eau pour atteindre votre objectif d'hydratation.`);
    } else {
      notes.push(`üíß Vous avez bu ${hydratation_reelle_ml} mL d'eau pure aujourd'hui. Essayez d'ajouter environ ${manque_ml} mL d'eau pour atteindre votre objectif. L'eau reste votre meilleur alli√© : c'est la seule boisson 100% hydratante.`);
    }
  }
  
  // üöª 2. Couleur de l'urine (indicateur uniquement)
  if (urine_couleur <= 3) {
    notes.push("üöª La couleur claire de vos urines indique une bonne hydratation actuelle.");
  } else if (urine_couleur <= 5) {
    notes.push("üöª ‚ö†Ô∏è Vos urines sont l√©g√®rement fonc√©es : cela indique que vous √™tes actuellement en d√©but de d√©shydratation. Buvez de l'eau d√®s maintenant pour corriger cet √©tat.");
  } else if (urine_couleur <= 7) {
    notes.push("üöª ‚ö†Ô∏è La couleur fonc√©e de vos urines indique que vous √™tes actuellement d√©shydrat√©(e). Augmentez votre consommation d'eau d√®s maintenant pour retrouver une hydratation optimale.");
  } else {
    notes.push("üöª ‚ö†Ô∏è Vos urines tr√®s fonc√©es signalent une d√©shydratation importante. Buvez de l'eau imm√©diatement (500-750 mL dans l'heure). Si cette couleur persiste malgr√© une bonne hydratation, consultez un professionnel de sant√©.");
  }
  
  // üí™ 3. Crampes et courbatures
  if (crampes === "Non" && courbatures === "Non") {
    notes.push("üí™ Aucun signe musculaire notable : vos apports hydriques et √©lectrolytiques sont bien adapt√©s.");
  } else if (crampes === "Oui" && courbatures === "Non") {
    notes.push("üí™ De l√©g√®res crampes peuvent indiquer un petit d√©ficit en magn√©sium ou sodium. Buvez 250 mL suppl√©mentaires et veillez √† consommer des aliments riches en √©lectrolytes.");
  } else if (crampes === "Non" && courbatures === "Oui") {
    notes.push("üí™ Les courbatures peuvent √™tre att√©nu√©es par une bonne hydratation qui facilite l'√©limination des m√©tabolites. Buvez 250 mL suppl√©mentaires.");
  } else {
    notes.push("üí™ Des crampes et courbatures fr√©quentes signalent souvent un d√©s√©quilibre hydro-√©lectrolytique. Buvez 500 mL d'eau en plus et privil√©giez une boisson contenant sodium, potassium et magn√©sium. Si les crampes persistent, un avis m√©dical est recommand√©.");
  }
  
  // üèÉ 4. Activit√© physique
  if (sport_pratique === "Oui" && besoins_exercice_ml > 0) {
    notes.push(`üèÉ L'effort augmente vos pertes hydriques : pr√©voyez une hydratation adapt√©e avant, pendant et apr√®s l'exercice. Pour cette s√©ance, vos pertes estim√©es sont d'environ ${besoins_exercice_ml} mL.`);
    
    if (duree_heures > 0) {
      const ml_par_heure = Math.round(besoins_exercice_ml / duree_heures);
      notes.push(`üèÉ En moyenne, cela repr√©sente ${ml_par_heure} mL par heure d'effort, √† r√©partir en petites gorg√©es. Apr√®s l'effort, buvez environ 1,5 fois la perte de poids observ√©e pour une r√©cup√©ration optimale.`);
    }
    
    if (transpiration_echelle >= 7) {
      notes.push("üèÉ Votre transpiration est importante : pensez √† int√©grer une boisson contenant sodium et magn√©sium. Pour un effort de cette intensit√©, la consommation d'une solution hypotonique comme Hydratis peut aider √† mieux retenir l'eau.");
    }
  }
  
  // üå°Ô∏è 5. Temp√©rature ext√©rieure
  if (temperature_ext === "> 28¬∞C") {
    notes.push(`üå°Ô∏è Par temps chaud, ajoutez ${getAjustTemperatureBasal(temperature_ext)} mL d'eau suppl√©mentaires. Au-del√† de 30¬∞C, la transpiration augmente fortement : buvez plus souvent, m√™me sans soif. En cas de chaleur ou d'humidit√© √©lev√©e, privil√©giez des solutions hydratantes riches en √©lectrolytes.`);
  } else if (temperature_ext === "18-28¬∞C") {
    notes.push("üå°Ô∏è La temp√©rature ambiante influence directement vos besoins hydriques. Gardez le r√©flexe de boire r√©guli√®rement tout au long de la journ√©e.");
  } else if (temperature_ext === "< 10¬∞C" || temperature_ext === "10-18¬∞C") {
    notes.push("üå°Ô∏è Sous 20¬∞C, vos besoins restent proches de la moyenne, mais gardez le r√©flexe de boire r√©guli√®rement.");
  }
  
  // üí¶ 6. Transpiration / sensation d'effort
  if (sport_pratique === "Oui") {
    if (transpiration_echelle >= 7) {
      notes.push("üí¶ Votre transpiration a √©t√© intense : vos besoins d√©passent probablement 1 L d'eau pour cette s√©ance. N'oubliez pas d'apporter aussi des √©lectrolytes pour reconstituer les pertes en sodium et potassium. La soif est un signal tardif de d√©shydratation : buvez avant de la ressentir.");
    } else if (transpiration_echelle >= 4) {
      notes.push(`üí¶ Votre sensation de transpiration correspond √† une perte mod√©r√©e : pensez √† boire environ ${besoins_exercice_ml} mL pendant et apr√®s l'effort.`);
    } else {
      notes.push("üí¶ M√™me si vous transpirez peu, l'eau reste essentielle pour r√©guler la temp√©rature corporelle.");
    }
  }
  
  // Situation particuli√®re
  if (situation_particuliere?.startsWith("Enceinte")) {
    notes.push("ü§∞ Grossesse : privil√©giez une hydratation r√©guli√®re. Consultez un m√©decin en cas de malaise.");
  }
  
  if (situation_particuliere === "Allaitante") {
    notes.push("ü§± Allaitement : vos besoins en eau sont augment√©s d'environ 700 mL/jour.");
  }
  
  if (metier_physique === "Oui") {
    notes.push("üíº M√©tier physique : pensez √† vous hydrater r√©guli√®rement au cours de la journ√©e, m√™me sans sensation de soif.");
  }

  return {
    besoins_basals_ml,
    details_basals: {
      base_age_sexe,
      ajust_imc,
      ajust_temperature,
      ajust_boissons,
      ajust_physiologique,
      ajust_symptomes,
    },
    besoins_exercice_ml,
    details_exercice: {
      pertes_transpiration: Math.round(pertes_transpiration),
      facteur_sport,
      duree_heures,
      ajust_temperature: ajust_temperature_exercice,
    },
    besoin_total_ml,
    hydratation_reelle_ml,
    ecart_hydratation_ml,
    nb_pastilles_basal,
    nb_pastilles_exercice,
    nb_pastilles_post_exercice,
    score,
    statut,
    notes,
  };
};
